{"version":3,"sources":["components/clusters.js","components/deltabargraph.js","components/statemetacard.js","components/statemeta.js","components/state.js"],"names":["React","memo","stateCode","useState","fetched","setFetched","stateRawData","setStateRawData","networkData","setNetworkData","useEffect","a","axios","get","rawDataResponse","data","raw_data","filter","d","statecode","console","log","getData","contractedStr","reduce","acc","v","contractedfromwhichpatientsuspected","replace","sources","Set","match","nodes","nodesSet","links","forEach","contracted","pid","patientnumber","add","push","id","group","has","raw","p","source","target","prepareNetworkData","NetworkGraph","fgRef","useRef","fg","current","width","document","getElementById","offsetWidth","height","d3Force","strength","d3","i","n","length","currNode","x","Math","max","min","y","ref","graphData","nodeLabel","nodeColor","node","linkDirectionalParticleColor","linkDirectionalParticles","linkDirectionalParticleWidth","link","enableZoomPanInteraction","ReactDOM","render","timeseries","arrayKey","setData","svgRef","svg","margin","chartRight","attr","chartBottom","formatTime","xScale","domain","map","date","range","paddingInner","yScale","xAxis","tickSize","select","style","call","g","remove","selectAll","join","w","h","r","f","undefined","y0","roundedBar","bandwidth","text","append","className","animationDelay","viewBox","preserveAspectRatio","StateMetaCard","title","statistic","total","formula","description","data-tip","data-event","data-event-off","data-for","StateMeta","stateData","lastTestObject","population","lastSevenDaysData","totalData","confirmed","active","deaths","recovered","sevenDayBeforeData","totalconfirmed","sevenDayBeforeDate","format","previousDayData","previousDayDate","confirmedPerMillion","recoveryPercent","activePercent","deathPercent","testPerMillion","totaltested","growthRate","totalConfirmedPerMillion","updatedDate","isNaN","parse","updatedon","Date","Fragment","place","type","effect","multiline","scrollHide","globalEventOff","formatNumber","href","toFixed","round","state","props","mapRef","useParams","toUpperCase","allStateData","setAllStateData","setTimeseries","setStateData","testData","setTestData","setSources","districtData","setDistrictData","STATE_CODES","stateName","mapOption","setMapOption","useMeasure","mapSwitcher","showAllDistricts","setShowAllDistricts","useEffectOnce","getState","code","Promise","all","dataResponse","stateDistrictWiseResponse","statesDailyResponse","stateTestResponse","sourcesResponse","name","states","statewise","find","s","ts","parseStateTimeseries","testTs","parseStateTestTimeseries","states_tested_data","tsMerged","mergeTimeseries","sourceList","sources_list","statesTests","obj","anime","targets","duration","delay","translateX","easing","opacity","testObjLast","STATE_POPULATIONS","gridRowCount","gridColumnCount","window","innerWidth","districtCount","Object","keys","ceil","getGridRowCount","Helmet","content","Item","direction","selected","Caret","Menu","key","to","formatDateAbsolute","lastupdatedtime","transform","onClick","forwardRef","mapMeta","MAP_META","districts","stateTestData","isCountryLoaded","index","num","slice","display","gridTemplateRows","sort","b","district","delta","every","day","dailyconfirmed"],"mappings":"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","file":"static/js/11.f030d198.chunk.js","sourcesContent":["import axios from 'axios';\nimport * as d3 from 'd3';\nimport React, {useEffect, useRef, useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport ForceGraph2D from 'react-force-graph-2d';\n\nconst isEqual = () => {\n  return true;\n};\n\nfunction Clusters({stateCode}) {\n  const [fetched, setFetched] = useState(false);\n  const [stateRawData, setStateRawData] = useState([]);\n  const [networkData, setNetworkData] = useState([]);\n\n  function prepareNetworkData(data) {\n    // Parse data\n    let contractedStr = data.reduce(\n      (acc, v) => acc + v.contractedfromwhichpatientsuspected + ', ',\n      ''\n    );\n    contractedStr = contractedStr.replace(/\\s+/g, '');\n    const sources = new Set(contractedStr.match(/[^,]+/g));\n\n    // Prepare nodes and links\n    const nodes = [];\n    const nodesSet = new Set();\n    const links = [];\n    data.forEach((d) => {\n      const contractedStr = d.contractedfromwhichpatientsuspected.replace(\n        /\\s+/g,\n        ''\n      );\n      const contracted = contractedStr.match(/[^,]+/g);\n      if (contracted) {\n        const pid = 'P' + d.patientnumber;\n        nodesSet.add(pid);\n        nodes.push({\n          id: pid,\n          group: sources.has(pid) ? 'source' : 'target',\n          raw: d,\n        });\n        contracted.forEach((p) => {\n          links.push({\n            source: p,\n            target: pid,\n          });\n        });\n      }\n    });\n\n    // Add missing nodes\n    links.forEach((d) => {\n      if (!nodesSet.has(d.source)) {\n        nodes.push({\n          id: d.source,\n          group: 'source',\n          raw: d.source,\n        });\n        nodesSet.add(d.source);\n      }\n    });\n    return {\n      nodes: nodes,\n      links: links,\n    };\n  }\n\n  useEffect(() => {\n    async function getData() {\n      try {\n        const rawDataResponse = await axios.get(\n          'https://api.covid19india.org/raw_data.json'\n        );\n        setStateRawData(\n          rawDataResponse.data.raw_data.filter((d) => d.statecode === stateCode)\n        );\n        setFetched(true);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    if (!fetched) {\n      getData();\n    }\n  }, [fetched, stateCode]);\n\n  useEffect(() => {\n    setNetworkData(prepareNetworkData(stateRawData));\n  }, [stateRawData]);\n\n  const NetworkGraph = () => {\n    const fgRef = useRef();\n\n    useEffect(() => {\n      const fg = fgRef.current;\n      const width = document.getElementById('clusters').offsetWidth;\n      const height = width;\n      // Deactivate existing forces\n      fg.d3Force('charge').strength(-60);\n      fg.d3Force('collision', d3.forceCollide());\n      fg.d3Force('x', d3.forceX().strength(0.3));\n      fg.d3Force('y', d3.forceY().strength(0.3));\n      fg.d3Force('box', boxForce);\n\n      // Custom force to keep everything inside box\n      function boxForce() {\n        for (let i = 0, n = networkData.nodes.length; i < n; ++i) {\n          const currNode = networkData.nodes[i];\n          currNode.x = Math.max(-width, Math.min(width, currNode.x));\n          currNode.y = Math.max(-height, Math.min(height, currNode.y));\n        }\n      }\n    }, []);\n\n    const width = document.getElementById('clusters').offsetWidth;\n    const height = width;\n\n    return (\n      <ForceGraph2D\n        ref={fgRef}\n        width={width}\n        height={height}\n        graphData={networkData}\n        nodeLabel=\"id\"\n        nodeColor={(node) => (node.group === 'source' ? '#dc3545' : 'gray')}\n        linkDirectionalParticleColor={() => 'red'}\n        linkDirectionalParticles={1}\n        linkDirectionalParticleWidth={(link) =>\n          link.source.id[0] === 'P' ? 2 : 0\n        }\n        enableZoomPanInteraction={false}\n      />\n    );\n  };\n\n  useEffect(() => {\n    ReactDOM.render(<NetworkGraph />, document.getElementById('clusters'));\n  }, [networkData]);\n\n  return <div id=\"clusters\"></div>;\n}\n\nexport default React.memo(Clusters, isEqual);\n","import * as d3 from 'd3';\nimport React, {useEffect, useRef, useState} from 'react';\n\nfunction DeltaBarGraph({timeseries, arrayKey}) {\n  const [data, setData] = useState([]);\n  const svgRef = useRef();\n\n  useEffect(() => {\n    setData(timeseries);\n  }, [timeseries]);\n\n  useEffect(() => {\n    if (!data.length) return;\n\n    const svg = d3.select(svgRef.current);\n    const width = +svg.attr('width');\n    const height = +svg.attr('height');\n\n    const margin = {top: 50, right: 0, bottom: 50, left: 0};\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n    const barRadius = 5;\n\n    const formatTime = d3.timeFormat('%e %b');\n    const xScale = d3\n      .scaleBand()\n      .domain(data.map((d) => formatTime(d.date)))\n      .range([margin.left, chartRight])\n      .paddingInner(0.33);\n\n    const yScale = d3\n      .scaleLinear()\n      .domain([\n        0,\n        Math.max(\n          1,\n          d3.max(data, (d) => d[arrayKey])\n        ),\n      ])\n      .range([chartBottom, margin.top]); // - barRadius\n\n    const xAxis = d3.axisBottom(xScale).tickSize(0);\n\n    svg\n      .select('.x-axis')\n      .style('transform', `translateY(${chartBottom}px)`)\n      .call(xAxis)\n      .call((g) => g.select('.domain').remove())\n      .selectAll('text')\n      .attr('y', 0)\n      .attr('dy', '1.5em')\n      .style('text-anchor', 'middle');\n\n    svg\n      .selectAll('.bar')\n      .data(data)\n      .join('path')\n      .attr('class', 'bar')\n      .attr('d', (d) =>\n        roundedBar(\n          xScale(formatTime(d.date)),\n          chartBottom,\n          xScale.bandwidth(),\n          chartBottom - yScale(d[arrayKey]),\n          barRadius\n        )\n      )\n      .attr('fill', (d, i) => (i < data.length - 1 ? '#dc354590' : '#dc3545'));\n\n    svg\n      .selectAll('.delta')\n      .data(data)\n      .join('text')\n      .attr('class', 'delta')\n      .attr('text-anchor', 'middle')\n      .attr('font-size', '11px')\n      .attr('x', (d) => xScale(formatTime(d.date)) + xScale.bandwidth() / 2)\n      .attr('y', (d) => yScale(d[arrayKey]) - 6)\n      .text((d) => d[arrayKey])\n      .append('tspan')\n      .attr('class', 'percent')\n      .attr('x', (d) => xScale(formatTime(d.date)) + xScale.bandwidth() / 2)\n      .attr('dy', '-1.2em')\n      .text((d, i) =>\n        i && data[i - 1][arrayKey]\n          ? d3.format('+.1%')(\n              (data[i][arrayKey] - data[i - 1][arrayKey]) /\n                data[i - 1][arrayKey]\n            )\n          : ''\n      );\n  }, [data, arrayKey]);\n\n  return (\n    <div className=\"DeltaBarGraph fadeInUp\" style={{animationDelay: '0.8s'}}>\n      <svg\n        ref={svgRef}\n        width=\"250\"\n        height=\"250\"\n        viewBox=\"0 0 250 250\"\n        preserveAspectRatio=\"xMidYMid meet\"\n      >\n        <g className=\"x-axis\" />\n        <g className=\"y-axis\" />\n      </svg>\n    </div>\n  );\n}\n\nexport default React.memo(DeltaBarGraph, () => {\n  return true;\n});\n\nfunction roundedBar(x, y, w, h, r, f) {\n  if (!h) return;\n  // Flag for sweep:\n  if (f === undefined) f = 1;\n  // x coordinates of top of arcs\n  const x0 = x + r;\n  const x1 = x + w - r;\n  // y coordinates of bottom of arcs\n  const y0 = y - h + r;\n\n  const parts = [\n    'M',\n    x,\n    y,\n    'L',\n    x,\n    y0,\n    'A',\n    r,\n    r,\n    0,\n    0,\n    f,\n    x0,\n    y - h,\n    'L',\n    x1,\n    y - h,\n    'A',\n    r,\n    r,\n    0,\n    0,\n    f,\n    x + w,\n    y0,\n    'L',\n    x + w,\n    y,\n    'Z',\n  ];\n  return parts.join(' ');\n}\n","import React from 'react';\nimport * as Icon from 'react-feather';\n\nfunction StateMetaCard({\n  title,\n  statistic,\n  total,\n  formula,\n  date,\n  description,\n  className,\n}) {\n  return (\n    <div className={`meta-item ${className}`}>\n      <div className=\"meta-item-top\">\n        <h3>{title}</h3>\n        <span\n          data-tip={formula}\n          data-event=\"touchstart mouseover\"\n          data-event-off=\"mouseleave\"\n          data-for=\"stateMeta\"\n        >\n          <Icon.Info />\n        </span>\n      </div>\n      <h1>{statistic}</h1>\n      <h5>{date}</h5>\n      {total && <h5>{`India has ${total} CPM`}</h5>}\n      <p>{description}</p>\n    </div>\n  );\n}\n\nexport default StateMetaCard;\n","import StateMetaCard from './statemetacard';\n\nimport {formatNumber} from '../utils/commonfunctions';\n\nimport {format, parse} from 'date-fns';\nimport React from 'react';\nimport * as Icon from 'react-feather';\nimport ReactTooltip from 'react-tooltip';\n\nfunction StateMeta({\n  stateData,\n  lastTestObject,\n  population,\n  lastSevenDaysData,\n  totalData,\n}) {\n  const confirmed = stateData.confirmed;\n  const active = stateData.active;\n  const deaths = stateData.deaths;\n  const recovered = confirmed - active - deaths;\n  const sevenDayBeforeData = lastSevenDaysData[0].totalconfirmed;\n  const sevenDayBeforeDate = format(lastSevenDaysData[0].date, 'dd MMM');\n  const previousDayData = lastSevenDaysData[6].totalconfirmed;\n  const previousDayDate = format(lastSevenDaysData[6].date, 'dd MMM');\n  const confirmedPerMillion = (confirmed / population) * 1000000;\n  const recoveryPercent = (recovered / confirmed) * 100;\n  const activePercent = (active / confirmed) * 100;\n  const deathPercent = (deaths / confirmed) * 100;\n  const testPerMillion = (lastTestObject?.totaltested / population) * 1000000;\n  const growthRate =\n    ((previousDayData - sevenDayBeforeData) / sevenDayBeforeData) * 100;\n  const totalConfirmedPerMillion =\n    (totalData[0].confirmed / 1332900000) * 1000000;\n  // const doublingRate =\n  // growthRate > 0 ? (70 / Math.round(growthRate)).toFixed(2) : 0;\n\n  const updatedDate = !isNaN(\n    parse(lastTestObject?.updatedon, 'dd/MM/yyyy', new Date())\n  )\n    ? `As of ${format(\n        parse(lastTestObject?.updatedon, 'dd/MM/yyyy', new Date()),\n        'dd MMM'\n      )}`\n    : '';\n\n  return (\n    <React.Fragment>\n      <div className=\"StateMeta population\">\n        <ReactTooltip\n          place=\"top\"\n          type=\"dark\"\n          effect=\"solid\"\n          multiline={true}\n          scrollHide={true}\n          globalEventOff=\"click\"\n          id=\"stateMeta\"\n        />\n        <div className=\"meta-item population fadeInUp\">\n          <h3>Population</h3>\n          <h1>{formatNumber(population)}</h1>\n        </div>\n        <div className=\"alert\">\n          <Icon.Compass />\n          <div className=\"alert-right\">\n            Based on 2019 population projection by NCP{' '}\n            <a\n              href=\"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\"\n              target=\"_noblank\"\n            >\n              report\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"StateMeta\">\n        <StateMetaCard\n          className=\"confirmed\"\n          title={'Confirmed Per Million'}\n          statistic={confirmedPerMillion.toFixed(2)}\n          total={totalConfirmedPerMillion.toFixed(2)}\n          formula={'(confirmed / state population) * 1 Million'}\n          description={`\n            ${Math.round(\n              confirmedPerMillion\n            )} out of every 1 million people in ${\n            stateData.state\n          } have tested positive for the virus.\n            `}\n        />\n\n        <StateMetaCard\n          className=\"active\"\n          title={'Active'}\n          statistic={`${activePercent.toFixed(2)}%`}\n          formula={'(active / confirmed) * 100'}\n          description={`For every 100 confirmed cases, ${activePercent.toFixed(\n            0\n          )} are currently infected.`}\n        />\n\n        <StateMetaCard\n          className=\"recovery\"\n          title={'Recovery Rate'}\n          statistic={`${recoveryPercent.toFixed(2)}%`}\n          formula={'(recovered / confirmed) * 100'}\n          description={`For every 100 confirmed cases, \n            ${Math.round(\n              recoveryPercent.toFixed(0)\n            )} have recovered from the virus.`}\n        />\n\n        <StateMetaCard\n          className=\"mortality\"\n          title={'Mortality Rate'}\n          statistic={`${deathPercent.toFixed(2)}%`}\n          formula={'(deceased / confirmed) * 100'}\n          description={`For every 100 confirmed cases, \n            ${Math.round(\n              deathPercent.toFixed(0)\n            )} have unfortunately passed away from the virus.`}\n        />\n\n        <StateMetaCard\n          className=\"gr\"\n          title={'Avg. Growth Rate'}\n          statistic={growthRate > 0 ? `${Math.round(growthRate / 7)}%` : '-'}\n          formula={\n            '(((previousDayData - sevenDayBeforeData) / sevenDayBeforeData) * 100)/7'\n          }\n          date={`${sevenDayBeforeDate} - ${previousDayDate}`}\n          description={`In the last one week, the number of new infections has grown by an average of ${Math.round(\n            growthRate / 7\n          )}% every day.`}\n        />\n\n        <StateMetaCard\n          className=\"tpm\"\n          title={'Tests Per Million'}\n          statistic={`≈ ${Math.round(testPerMillion)}`}\n          formula={\n            '(total tests in state / total population of state) * 1 Million'\n          }\n          date={updatedDate}\n          description={`For every 1 million people in ${stateData.state},\n            ${Math.round(testPerMillion)} people were tested.`}\n        />\n\n        {/* <div className=\"meta-item ptr fadeInUp\">\n          <div className=\"meta-item-top\">\n            <h3>Positive Test Rate</h3>\n            <span\n              data-tip={\n                'TPM = (total tests in state / total population of state) * 1 Million'\n              }\n              data-event=\"touchstart mouseover\"\n              data-event-off=\"mouseleave\"\n              data-for=\"stateMeta\"\n            >\n              <Icon.Info />\n            </span>\n          </div>\n          <h1>\n            {lastTestObject?.testpositivityrate\n              ? lastTestObject.testpositivityrate\n              : 'N/A'}\n          </h1>\n          {updatedDate}\n          <p>\n            {lastTestObject?.testpositivityrate\n              ? `Out the of total tests conducted till date month, ${lastTestObject.testpositivityrate}% were positive for the virus`\n              : 'N/A'}\n          </p>\n        </div>*/}\n\n        {/*\n          <div className=\"meta-item dbr fadeInUp\">\n            <div className=\"meta-item-top\">\n              <h3>Doubling Rate</h3>\n              <Icon.Info />\n            </div>\n            <h1>\n              {doublingRate > 0 ? Math.round(doublingRate * 7) + ' Days' : '-'}\n            </h1>\n            <h6 style={{margin: '0'}}>\n              {sevenDayBeforeDate} - {previousDayDate}\n            </h6>\n          </div>\n        )*/}\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default StateMeta;\n","import Clusters from './clusters';\nimport DeltaBarGraph from './deltabargraph';\nimport Footer from './footer';\nimport Level from './level';\nimport MapExplorer from './mapexplorer';\nimport Minigraph from './minigraph';\nimport StateMeta from './statemeta';\nimport TimeSeriesExplorer from './timeseriesexplorer';\n\nimport {MAP_META, STATE_CODES, STATE_POPULATIONS} from '../constants';\nimport {\n  formatDateAbsolute,\n  formatNumber,\n  mergeTimeseries,\n  parseStateTimeseries,\n  parseStateTestTimeseries,\n} from '../utils/commonfunctions';\n\nimport {Breadcrumb, Dropdown} from '@primer/components';\nimport anime from 'animejs';\nimport axios from 'axios';\nimport {format, parse} from 'date-fns';\nimport React, {useRef, useState} from 'react';\nimport * as Icon from 'react-feather';\nimport {Helmet} from 'react-helmet';\nimport {Link, useParams, Redirect} from 'react-router-dom';\nimport {useMeasure, useEffectOnce} from 'react-use';\n\nfunction State(props) {\n  const mapRef = useRef();\n\n  const stateCode = useParams().stateCode.toUpperCase();\n  const [allStateData, setAllStateData] = useState({});\n  const [fetched, setFetched] = useState(false);\n  const [timeseries, setTimeseries] = useState({});\n  const [stateData, setStateData] = useState(null);\n  const [testData, setTestData] = useState({});\n  const [sources, setSources] = useState({});\n  const [districtData, setDistrictData] = useState({});\n  const [stateName] = useState(STATE_CODES[stateCode]);\n  const [mapOption, setMapOption] = useState('confirmed');\n  const [mapSwitcher, {width}] = useMeasure();\n  const [showAllDistricts, setShowAllDistricts] = useState(false);\n\n  useEffectOnce(() => {\n    getState(stateCode);\n  });\n\n  const getState = async (code) => {\n    try {\n      const [\n        {data: dataResponse},\n        {data: stateDistrictWiseResponse},\n        {data: statesDailyResponse},\n        {data: stateTestResponse},\n        {data: sourcesResponse},\n      ] = await Promise.all([\n        axios.get('https://api.covid19india.org/data.json'),\n        axios.get('https://api.covid19india.org/state_district_wise.json'),\n        axios.get('https://api.covid19india.org/states_daily.json'),\n        axios.get('https://api.covid19india.org/state_test_data.json'),\n        axios.get('https://api.covid19india.org/sources_list.json'),\n      ]);\n      const name = STATE_CODES[code];\n\n      const states = dataResponse.statewise;\n      setAllStateData(states.filter((state) => state.statecode !== code));\n      setStateData([states.find((s) => s.statecode === code)]);\n      // Timeseries\n      const ts = parseStateTimeseries(statesDailyResponse)[code];\n      const testTs = parseStateTestTimeseries(\n        stateTestResponse.states_tested_data\n      )[code];\n      // Merge\n      const tsMerged = mergeTimeseries({[code]: ts}, {[code]: testTs});\n      setTimeseries(tsMerged[code]);\n      // District data\n      setDistrictData({\n        [name]: stateDistrictWiseResponse[name],\n      });\n      const sourceList = sourcesResponse.sources_list;\n      setSources(sourceList.filter((state) => state.statecode === code));\n\n      const statesTests = stateTestResponse.states_tested_data;\n      setTestData(\n        statesTests.filter(\n          (obj) => obj.state === name && obj.totaltested !== ''\n        )\n      );\n      setFetched(true);\n      anime({\n        targets: '.highlight',\n        duration: 200,\n        delay: 3000,\n        translateX:\n          mapOption === 'confirmed'\n            ? `${width * 0}px`\n            : mapOption === 'active'\n            ? `${width * 0.25}px`\n            : mapOption === 'recovered'\n            ? `${width * 0.5}px`\n            : mapOption === 'deceased'\n            ? `${width * 0.75}px`\n            : '0px',\n        easing: 'spring(1, 80, 90, 10)',\n        opacity: 1,\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const testObjLast = testData[testData.length - 1];\n  const population = STATE_POPULATIONS[stateName];\n\n  function toggleShowAllDistricts() {\n    setShowAllDistricts(!showAllDistricts);\n  }\n\n  const getGridRowCount = () => {\n    const gridColumnCount = window.innerWidth >= 540 ? 3 : 2;\n    const districtCount =\n      (districtData[stateName] &&\n        Object.keys(districtData[stateName].districtData).length) ||\n      0;\n    const gridRowCount = Math.ceil(districtCount / gridColumnCount);\n    return gridRowCount;\n  };\n  const gridRowCount = getGridRowCount();\n\n  if (!stateName) {\n    return <Redirect to=\"/\" />;\n  } else {\n    return (\n      <React.Fragment>\n        <Helmet>\n          <title>\n            Coronavirus Outbreak in {STATE_CODES[stateCode]} - covid19india.org\n          </title>\n          <meta\n            name=\"title\"\n            content={`Coronavirus Outbreak in ${STATE_CODES[stateCode]}: Latest Map and Case Count`}\n          />\n        </Helmet>\n\n        <div className=\"State\">\n          <div className=\"state-left\">\n            <div className=\"breadcrumb\">\n              <Breadcrumb>\n                <Breadcrumb.Item href=\"/\">Home</Breadcrumb.Item>\n                <Dropdown direction=\"w\">\n                  <summary>\n                    <Breadcrumb.Item href={`${stateCode}`} selected>\n                      {stateName}\n                    </Breadcrumb.Item>\n                    <Dropdown.Caret className=\"caret\" />\n                  </summary>\n                  {fetched && (\n                    <Dropdown.Menu direction=\"se\">\n                      {allStateData.map((state) => (\n                        <Dropdown.Item key={state.statecode} className=\"item\">\n                          <Link to={`${state.statecode}`}>\n                            {STATE_CODES[state.statecode]}\n                          </Link>\n                        </Dropdown.Item>\n                      ))}\n                    </Dropdown.Menu>\n                  )}\n                </Dropdown>\n              </Breadcrumb>\n            </div>\n\n            <div className=\"header\">\n              <div\n                className=\"header-left fadeInUp\"\n                style={{animationDelay: '0.3s'}}\n              >\n                <h1>{stateName}</h1>\n                <h5>\n                  Last Updated on{' '}\n                  {stateData && Object.keys(stateData[0]).length\n                    ? formatDateAbsolute(stateData[0].lastupdatedtime)\n                    : ''}\n                </h5>\n              </div>\n\n              <div\n                className=\"header-right fadeInUp\"\n                style={{animationDelay: '0.5s'}}\n              >\n                <h5>Tested</h5>\n                <h2>{formatNumber(testObjLast?.totaltested)}</h2>\n                <h5 className=\"timestamp\">\n                  {!isNaN(\n                    parse(testObjLast?.updatedon, 'dd/MM/yyyy', new Date())\n                  )\n                    ? `As of ${format(\n                        parse(testObjLast?.updatedon, 'dd/MM/yyyy', new Date()),\n                        'dd MMM'\n                      )}`\n                    : ''}\n                </h5>\n                <h5>\n                  {'per '}\n                  {testObjLast?.totaltested && (\n                    <a href={testObjLast.source} target=\"_noblank\">\n                      source\n                    </a>\n                  )}\n                </h5>\n              </div>\n            </div>\n\n            {fetched && (\n              <div className=\"map-switcher\" ref={mapSwitcher}>\n                <div\n                  className={`highlight ${mapOption}`}\n                  style={{\n                    transform: `translateX(${width * 0}px)`,\n                    opacity: 0,\n                  }}\n                ></div>\n                <div\n                  className=\"clickable\"\n                  onClick={() => {\n                    setMapOption('confirmed');\n                    anime({\n                      targets: '.highlight',\n                      translateX: `${width * 0}px`,\n                      easing: 'spring(1, 80, 90, 10)',\n                    });\n                  }}\n                ></div>\n                <div\n                  className=\"clickable\"\n                  onClick={() => {\n                    setMapOption('active');\n                    anime({\n                      targets: '.highlight',\n                      translateX: `${width * 0.25}px`,\n                      easing: 'spring(1, 80, 90, 10)',\n                    });\n                  }}\n                ></div>\n                <div\n                  className=\"clickable\"\n                  onClick={() => {\n                    setMapOption('recovered');\n                    anime({\n                      targets: '.highlight',\n                      translateX: `${width * 0.5}px`,\n                      easing: 'spring(1, 80, 90, 10)',\n                    });\n                  }}\n                ></div>\n                <div\n                  className=\"clickable\"\n                  onClick={() => {\n                    setMapOption('deceased');\n                    anime({\n                      targets: '.highlight',\n                      translateX: `${width * 0.75}px`,\n                      easing: 'spring(1, 80, 90, 10)',\n                    });\n                  }}\n                ></div>\n              </div>\n            )}\n\n            {fetched && <Level data={stateData[0]} />}\n            {fetched && <Minigraph timeseries={timeseries} />}\n            {fetched && (\n              <MapExplorer\n                forwardRef={mapRef}\n                mapMeta={MAP_META[stateName]}\n                states={stateData}\n                districts={districtData}\n                stateTestData={testData}\n                isCountryLoaded={false}\n                mapOption={mapOption}\n              />\n            )}\n\n            {fetched && (\n              <div className=\"meta-secondary\">\n                <div className=\"alert\">\n                  <Icon.AlertCircle />\n                  <div className=\"alert-right\">\n                    Awaiting district details for{' '}\n                    {districtData[stateName]?.districtData['Unknown']\n                      ?.confirmed || '0'}{' '}\n                    cases\n                  </div>\n                </div>\n                <div className=\"alert\">\n                  <Icon.Compass />\n                  <div className=\"alert-right\">\n                    Data collected from sources{' '}\n                    {sources.length > 0\n                      ? Object.keys(sources[0]).map((key, index) => {\n                          if (key.match('source') && sources[0][key] !== '') {\n                            const num = key.match(/\\d+/);\n                            return (\n                              <React.Fragment key={index}>\n                                {num > 1 ? ',' : ''}\n                                <a href={sources[0][key]}>{num}</a>\n                              </React.Fragment>\n                            );\n                          }\n                          return null;\n                        })\n                      : ''}\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {fetched && (\n              <StateMeta\n                stateData={stateData[0]}\n                lastTestObject={testObjLast}\n                population={population}\n                lastSevenDaysData={timeseries.slice(-7)}\n                totalData={allStateData.filter(\n                  (state) => state.statecode === 'TT'\n                )}\n              />\n            )}\n          </div>\n\n          <div className=\"state-right\">\n            {fetched && (\n              <React.Fragment>\n                <div\n                  className=\"district-bar\"\n                  style={!showAllDistricts ? {display: 'flex'} : {}}\n                >\n                  <div\n                    className=\"district-bar-left fadeInUp\"\n                    style={{animationDelay: '0.6s'}}\n                  >\n                    <h2>Top districts</h2>\n                    <div\n                      className={`districts ${\n                        showAllDistricts ? 'is-grid' : ''\n                      }`}\n                      style={\n                        showAllDistricts\n                          ? {gridTemplateRows: `repeat(${gridRowCount}, 2rem)`}\n                          : {}\n                      }\n                    >\n                      {districtData[stateName]\n                        ? Object.keys(districtData[stateName].districtData)\n                            .filter((d) => d !== 'Unknown')\n                            .sort(\n                              (a, b) =>\n                                districtData[stateName].districtData[b]\n                                  .confirmed -\n                                districtData[stateName].districtData[a]\n                                  .confirmed\n                            )\n                            .slice(0, showAllDistricts ? undefined : 5)\n                            .map((district, index) => {\n                              return (\n                                <div key={index} className=\"district\">\n                                  <h2>\n                                    {\n                                      districtData[stateName].districtData[\n                                        district\n                                      ].confirmed\n                                    }\n                                  </h2>\n                                  <h5>{district}</h5>\n                                  <div className=\"delta\">\n                                    <Icon.ArrowUp />\n                                    <h6>\n                                      {\n                                        districtData[stateName].districtData[\n                                          district\n                                        ].delta.confirmed\n                                      }\n                                    </h6>\n                                  </div>\n                                </div>\n                              );\n                            })\n                        : ''}\n                    </div>\n                    {districtData[stateName] &&\n                      Object.keys(districtData[stateName].districtData).length >\n                        5 && (\n                        <button\n                          className=\"button\"\n                          onClick={toggleShowAllDistricts}\n                        >\n                          {showAllDistricts ? `View less` : `View all`}\n                        </button>\n                      )}\n                  </div>\n                  <div className=\"district-bar-right\">\n                    <div\n                      className=\"happy-sign fadeInUp\"\n                      style={{animationDelay: '0.6s'}}\n                    >\n                      {timeseries\n                        .slice(-5)\n                        .every((day) => day.dailyconfirmed === 0) && (\n                        <div className=\"alert is-green\">\n                          <Icon.Smile />\n                          <div className=\"alert-right\">\n                            No new confirmed cases in the past five days\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                    {\n                      <DeltaBarGraph\n                        timeseries={timeseries.slice(-5)}\n                        arrayKey={'dailyconfirmed'}\n                      />\n                    }\n                  </div>\n                </div>\n\n                {false && (\n                  <Link to=\"/essentials\">\n                    <div\n                      className=\"to-essentials fadeInUp\"\n                      style={{animationDelay: '0.9s'}}\n                    >\n                      <h2>Go to essentials</h2>\n                      <Icon.ArrowRightCircle />\n                    </div>\n                  </Link>\n                )}\n\n                <TimeSeriesExplorer timeseries={timeseries} />\n              </React.Fragment>\n            )}\n          </div>\n\n          <div className=\"state-left\">\n            <div className=\"Clusters fadeInUp\" style={{animationDelay: '0.8s'}}>\n              <h1>Network of Transmission</h1>\n              <Clusters stateCode={stateCode} />\n            </div>\n          </div>\n\n          <div className=\"state-right\"></div>\n        </div>\n        <Footer />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default React.memo(State);\n"],"sourceRoot":""}